
template CheckCommand "dummy-host-generic" {
    import "plugin-check-command"
    command = [ PluginDir + "/libexec/test_hostcheck.pl" ]
    arguments = {
            "--type"            = "$check_type$"
            "--failchance"      = "$check_failchance$"
            "--previous-state"  = "$check_previous_state$"
            "--state-duration"  = "$check_state_duration$"
            "--hostname"        = "$check_hostname$"
    }

    vars.check_type             = "UP"
    vars.check_failchance       = "2%"
    vars.check_previous_state   = "$state$"
    vars.check_state_duration   = "$duration_sec$"
    vars.check_hostname         = "$name$"
}

template CheckCommand "dummy-service-generic" {
    import "plugin-check-command"
    command = [ PluginDir + "/libexec/test_servicecheck.pl" ]
    arguments = {
            "--total-critical-on-host"  = "$check_critical_on_host$"
            "--total-warning-on-host"   = "$check_warning_on_host$"
            "--type"                    = "$check_type$"
            "--failchance"              = "$check_failchance$"
            "--previous-state"          = "$check_previous_state$"
            "--state-duration"          = "$check_state_duration$"
            "--hostname"                = "$check_hostname$"
            "--servicedesc"             = "$check_servicedesc$"
    }
    vars.check_critical_on_host     = "$host.total_services_critical$"
    vars.check_warning_on_host      = "$host.total_services_warning$"
    vars.check_type                 = "random"
    vars.check_failchange           = "5%"
    vars.check_previous_state       = "$service.state$"
    vars.check_duration             = "$service.duration_sec$"
    vars.check_hostname             = "$host.name$"
    vars.check_servicedesc          = "$service.name$"
}

// Concrete check commands
object CheckCommand "dummy-host" {
    import "dummy-host-generic"
}

object CheckCommand "dummy-service" {
    import "dummy-service-generic"
}

// Hostgroups
object HostGroup "all-hosts" {
    display_name = "All hosts on the system"
    assign where true
}

object HostGroup "all-ok" {
    display_name = "All ok hosts"
    assign where regex("^test-ok", host.name)
}

object HostGroup "all-chaos" {
    display_name = "All chaos hosts"
    assign where regex("^test-random", host.name)
}

object HostGroup "all-down" {
    display_name = "All down hosts"
    assign where regex("^test-down", host.name)
}

object HostGroup "all-up" {
    display_name = "All ok hosts"
    assign where regex("^test-ok", host.name)
}

object HostGroup "all-unreachable" {
    display_name = "All ok hosts"
    assign where regex("^test-unreachable", host.name)
}

object HostGroup "all-pending" {
    display_name = "All ok hosts"
    assign where regex("^test-pending", host.name)
}

// Servicegroups
object ServiceGroup "service-ok" {
    display_name = "All ok services"
    assign where regex("^service-ok", service.name)
}

object ServiceGroup "service-warning" {
    display_name = "All warning services"
    assign where regex("^service-warning", service.name)
}

object ServiceGroup "service-critical" {
    display_name = "All critical services"
    assign where regex("^service-critical", service.name)
}

object ServiceGroup "service-unknown" {
    display_name = "All unknown services"
    assign where regex("^service-unknown", service.name)
}

object ServiceGroup "service-flapping" {
    display_name = "All flapping services"
    assign where regex("^service-flapping", service.name)
}


object ServiceGroup "service-pending" {
    display_name = "All pending services"
    assign where regex("^service-pending", service.name)
}

// Config helper
function loop(count, func) {
        count == 1 || loop(count - 1, func)
        func(count)
}

// ---------------------------------------------------------------------------------------------------------------------
// Services
// ---------------------------------------------------------------------------------------------------------------------

function createService(filter, num, checkEnabled) {
    apply Service "service-" + filter + "-" + string(num) {
        import "generic-service"
        check_command   = "dummy-service"
        enable_active_checks = checkEnabled
        vars.check_type = filter
        assign where match("*" + filter + "*", host.vars.check_config)
    }
}

loop(4, lambda num: {
    createService("ok", num, true)
    createService("warning", num, true)
    createService("critical", num, true)
    createService("flap", num, true)
    createService("random", num, true)
    createService("unknown", num, true)
    createService("pending", num, false)
})

// ---------------------------------------------------------------------------------------------------------------------
// Hosts
// ---------------------------------------------------------------------------------------------------------------------

function createHost(checkType, checkConfig, num, checkEnabled) {
    object Host "test-" + checkType + "-" + string(num) {
        import "generic-host"
        address = "127.0.0.1"
        check_command = "dummy-host"
        enable_active_checks = checkEnabled
        vars.check_type = checkType
        vars.check_config = checkConfig
    }
}

loop(10, lambda num: {
     createHost("ok", "ok", num, true)
     createHost("random", "random,flap", num, true)
     createHost("down", "warning,critical", num, true)
     createHost("unreachable", "unknown", num, true)
     createHost("pending", "pending", num, false)
     createHost("flap", "flap", num, true)
 })

// EOF